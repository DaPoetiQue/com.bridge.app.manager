using Bridge.Core.App.Manager;
using System;
using System.Diagnostics;
using System.IO;
using UnityEngine;

namespace Bridge.Core.UnityEditor.App.Manager
{
    public static class BuildCompilerScript
    {
        public static void BuildCompiler(BuildSettingsData appSettings)
        {
            try
            {
                #region Header Data

                string buildScripts = "/BuildScripts";
                string compilerFileName = "Compiler.bat";
                string buildCompilerFileName = "BuildCompiler.bat";

                #endregion

                #region Compiler

                var compilerData = new FileInfo(compilerFileName);
                string compilerDir = compilerData.DirectoryName;
                string compileScriptsDir = compilerDir + buildScripts;
                string compileScriptsCommand = compileScriptsDir + "/" + compilerData.Name;

                #endregion

                #region Build Compiler

                var buildCompilerData = new FileInfo(buildCompilerFileName);
                string buildCompilerDir = buildCompilerData.DirectoryName;
                string buildScriptsDir = buildCompilerDir + buildScripts;
                string buildScriptsCommand = buildScriptsDir + "/" + buildCompilerData.Name;

                #endregion

                UnityEngine.Debug.Log($"Creating Compiler - Directory : {buildScriptsDir} - File Path : {buildScriptsCommand}");

                if (!Directory.Exists(buildScriptsDir))
                {
                    Directory.CreateDirectory(buildScriptsDir);
                    UnityEngine.Debug.Log($"--> Creating Build Compiler Directory : <color=cyan>{buildScriptsDir}</color>");
                }

                string targetDest = Path.GetTempPath();
                string targetDestDir = Path.Combine(targetDest, appSettings.appInfo.appName.Replace(" ", string.Empty));

                UnityEngine.Debug.Log($"--> Target Directory : <color=cyan>{targetDestDir}</color>");

                if (!Directory.Exists(targetDestDir))
                {
                    UnityEngine.Debug.Log($"--> Creating Temp Build Project Directory @ : <color=cyan>{targetDestDir}</color>");
                    Directory.CreateDirectory(targetDestDir);
                }

                //string excludedFolders = "/E /xd Library Temp Build Builds Obj Logs UserSettings MemoryCaptures";
                string excludedFolders = "/E /xd Library";

                string directoryToRemove = (Directory.Exists(targetDestDir)) ? "@RD /S /Q " + targetDestDir : string.Empty;

                if (!string.IsNullOrEmpty(directoryToRemove))
                {
                    UnityEngine.Debug.Log($"--> Purging All Project Data @ : <color=orange>{targetDestDir}</color>");
                }

                string builds = "*.apk *.exe *.aab *.unitypackage";
                //string autoGenerated = "*.csproj *.unityproj *.sln *.suo *.tmp *.user *.userprefs *.pidb *.booproj *.svd *.pdb *.mdb *.opendb *.VC.db";
                string autoGenerated = "";
                string excludeFiles = $"/xf {autoGenerated} {builds}";

                //string projectCopyCommand = $"robocopy {buildCompilerDir} {targetDestDir} {excludedFolders} {excludeFiles}";
                string projectCopyCommand = $"robocopy {buildCompilerDir} {targetDestDir} {excludedFolders} {excludeFiles}";

                // Build Command
                string rootPath = "C:/Program Files/";
                string unityVersion = Application.unityVersion;
                string path = "/Editor/Unity.exe";
                string pathCombined = "\"" + rootPath + unityVersion + path + "\"";
                string compilerDirectory = $"\"{targetDestDir.Replace("\\", "/")}{buildScripts}\"";
                string targetDirectory = $"\"{targetDestDir.Replace("\\", "/")}\"";
                string changeDirectoryCommand = "chdir /d " + compilerDirectory;
                string buildMethodName = "AppBuildConfig.BuildApp";
                string buildCommand = pathCombined + $" -quit -batchMode -projectPath .. -executeMethod {buildMethodName}";
                string compilerBatchFile = "./" + compilerFileName;

                UnityEngine.Debug.Log($"-->Change To Temp Compiler Directory : {changeDirectoryCommand}");

                string projectDir = "chdir /d " + targetDestDir;

                UnityEngine.Debug.Log($"-->Change To Build Compiler Directory : {projectDir}");

                #region Editor Log

                string logDir = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
                string editorLogDir = $"{logDir}\\Unity\\Editor\\Editor.log";
                string logEditorCommand = $"Type {editorLogDir}";
                UnityEngine.Debug.Log($"-->Data Directory : {editorLogDir}");

                #endregion

                Compiler compiler = new Compiler
                {
                    echoOff = "@echo off",
                    echoInitializeBuild = "echo Initializing Project Build...",
                    editorLogBuildStarted = logEditorCommand,
                    startBuildCommand = buildCommand,
                    editorLogBuildEnded = logEditorCommand,
                    echoEndBuild = "echo Build Completed...",
                    pause = "@pause"
                };

                BuildCompiler buildCompiler = new BuildCompiler
                {
                    echoOff = "@echo off",
                    echoPrepareBuild = "echo Preparing Build...",
                    removeDirectory = directoryToRemove,
                    echoCopy = "echo Copying Build Files...",
                    copyCommand = projectCopyCommand,
                    changeDirectory = changeDirectoryCommand,
                    echoCompile = "echo Compiling Build Scripts...",
                    compileBuildCommand = compilerBatchFile,
                    pause = "@pause"
                };

                File.WriteAllText(compileScriptsCommand, compiler.ToString());

                File.WriteAllText(buildScriptsCommand, buildCompiler.ToString());

                if (File.Exists(buildScriptsCommand))
                {
                    UnityEngine.Debug.Log($"--> <color=orange>Build Started....</color>");
                    StartBatchBuildCommand(buildScriptsCommand);
                }
            }
            catch (Exception exception)
            {
                throw exception;
            }
        }
        private static void StartBatchBuildCommand(string buildCommand)
        {
            Process.Start(buildCommand);
        }
    }
}
